from copy import deepcopy
from collections import deque

goal_state = [[0, 1, 2],
              [3, 4, 5],
              [6, 7, 8]]
moves = {
    'up': (-1, 0),
    'down': (1, 0),
    'left': (0, -1),
    'right': (0, 1)
}

def find_blank(board):
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                return i, j
    return None

def is_goal(state):
    return state == goal_state

def is_valid_move(x, y):
    return 0 <= x < 3 and 0 <= y < 3

def apply_move(board, move):
    x, y = find_blank(board)
    dx, dy = moves[move]
    new_x, new_y = x + dx, y + dy
    if is_valid_move(new_x, new_y):
        new_board = deepcopy(board)

        new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
        return new_board
    return None

def bfs(start):
    queue = deque([(start, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()

        if is_goal(current_state):
            return path + [current_state]

        visited.add(tuple(tuple(row) for row in current_state))

        for move in moves:
            new_state = apply_move(current_state, move)
            if new_state and tuple(tuple(row) for row in new_state) not in visited:
                queue.append((new_state, path + [current_state]))

    return None

def print_board(board):
    for row in board:
        print(row)
    print()

def print_solution(solution):
    if solution:
        for board in solution:
            print_board(board)
    else:
        print("No solution found")

initial_state = [[1, 4, 2],
                 [3, 5, 8],
                 [6, 0, 7]]

solution = bfs(initial_state)

print_solution(solution)
